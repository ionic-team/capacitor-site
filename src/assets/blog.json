[{"title":"Security Advisory CVE-2020-6506","description":"A security vulnerability discovered in Android WebView.","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"security-advisory-cve-2020-6506","date":"2020-09-16T08:00:00.000Z","contents":"---\ntitle: Security Advisory CVE-2020-6506\nslug: security-advisory-cve-2020-6506\ndate: 2020-09-16 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\ndescription: A security vulnerability discovered in Android WebView.\n---\n\nVulnerability detail: https://nvd.nist.gov/vuln/detail/CVE-2020-6506\n\nA universal cross-site scripting security vulnerability was discovered in Android WebView that allows cross-origin iframes or links to execute arbitrary JavaScript in the top-level document. For an attack to be successful, a user would need to navigate to a website or iframe containing malicious code within WebView. The vulnerability has been fixed in Android WebView as of version 83.0.4103.106, however users must update their Android WebView from the Google Play Store. \n\nFor users of the outdated Android WebView, Capacitor apps loading third party content in iframes or directly in the web view are only vulnerable if precautions are not taken. We are currently exploring a solution to help mitigate the vulnerability. We recommend taking the following precautions if your application may be vulnerable:\n\n## Capacitor configuration (`capacitor.config.json`)\n\nThe best line of defense is to only allow first-party trusted content in the web view. \n\n- Do not modify the server.url to a third party or **untrusted** website.\n- Do not add **untrusted** websites to server.allowNavigation.\n\nIt is recommended that apps behaving as a web browser use the Browser plugin. \n\n## HTML iframes\n\nCare should be taken when using iframes in your application. If you need to include an iframe in your page, make sure the content is from a trusted source. \n\nThe vulnerability can be mitigated by using the sandbox attribute. Using an empty value is the most restrictive configuration that will prevent an attack. \n\n```html\n<iframe sandbox=\"\" src=\"https://example.com/risky.html\"></iframe>\n```\n\n**Caution**: tokens can be added to the sandbox attribute to lift certain restrictions, however some configurations will cause an app to remain vulnerable, such as `“allow-popups allow-top-navigation allow-scripts”`.\n\n## Further Information\n\nMore information about the vulnerability can be found at https://bugs.chromium.org/p/chromium/issues/detail?id=1083819 and https://alesandroortiz.com/articles/uxss-android-webview-cve-2020-6506/. Many thanks to Alesandro Ortiz for bringing this to our attention.\n","preview":"","html":"<p>Vulnerability detail: <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-6506\">https://nvd.nist.gov/vuln/detail/CVE-2020-6506</a></p>\n<p>A universal cross-site scripting security vulnerability was discovered in Android WebView that allows cross-origin iframes or links to execute arbitrary JavaScript in the top-level document. For an attack to be successful, a user would need to navigate to a website or iframe containing malicious code within WebView. The vulnerability has been fixed in Android WebView as of version 83.0.4103.106, however users must update their Android WebView from the Google Play Store. </p>\n<p>For users of the outdated Android WebView, Capacitor apps loading third party content in iframes or directly in the web view are only vulnerable if precautions are not taken. We are currently exploring a solution to help mitigate the vulnerability. We recommend taking the following precautions if your application may be vulnerable:</p>\n<h2 id=\"capacitor-configuration-capacitorconfigjson\">Capacitor configuration (<code>capacitor.config.json</code>)</h2>\n<p>The best line of defense is to only allow first-party trusted content in the web view. </p>\n<ul>\n<li>Do not modify the server.url to a third party or <strong>untrusted</strong> website.</li>\n<li>Do not add <strong>untrusted</strong> websites to server.allowNavigation.</li>\n</ul>\n<p>It is recommended that apps behaving as a web browser use the Browser plugin. </p>\n<h2 id=\"html-iframes\">HTML iframes</h2>\n<p>Care should be taken when using iframes in your application. If you need to include an iframe in your page, make sure the content is from a trusted source. </p>\n<p>The vulnerability can be mitigated by using the sandbox attribute. Using an empty value is the most restrictive configuration that will prevent an attack. </p>\n<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">sandbox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com/risky.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>Caution</strong>: tokens can be added to the sandbox attribute to lift certain restrictions, however some configurations will cause an app to remain vulnerable, such as <code>“allow-popups allow-top-navigation allow-scripts”</code>.</p>\n<h2 id=\"further-information\">Further Information</h2>\n<p>More information about the vulnerability can be found at <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1083819\">https://bugs.chromium.org/p/chromium/issues/detail?id=1083819</a> and <a href=\"https://alesandroortiz.com/articles/uxss-android-webview-cve-2020-6506/\">https://alesandroortiz.com/articles/uxss-android-webview-cve-2020-6506/</a>. Many thanks to Alesandro Ortiz for bringing this to our attention.</p>\n","meta":{"title":"Security Advisory CVE-2020-6506","slug":"security-advisory-cve-2020-6506","date":"2020-09-16T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","description":"A security vulnerability discovered in Android WebView."}},{"title":"Integrating CapacitorJS Plugins with NuxtJS","description":"Learn how to integrate Capacitor with NuxtJS","authorName":"Dan Pastori","authorEmail":"dan@521dimensions.com","authorUrl":"https://twitter.com/danpastori","slug":"integrating-capacitorjs-plugins-with-nuxtjs","date":"2020-08-28T08:00:00.000Z","contents":"---\ntitle: Integrating CapacitorJS Plugins with NuxtJS\nslug: integrating-capacitorjs-plugins-with-nuxtjs\ndescription: Learn how to integrate Capacitor with NuxtJS\ndate: 2020-08-28 08:00:00\nauthor: Dan Pastori <dan@521dimensions.com>\nauthorUrl: https://twitter.com/danpastori\n---\n\n>The following is a guest blog post from Dan Pastori of [Server Side Up](https://serversideup.net). Server Side Up is an online community that shares tutorials and resources about Vuejs, Laravel, Wordpress, and more recently have started creating resources on how to deliver native apps with Capacitor.\n\nUsing CapacitorJS with NuxtJS is a perfect combination. NuxtJS allows you to develop powerful, modern fronteneds using VueJS. Combined with CapacitorJS, you can take those modern frontends, compilie them to mobile, and deploy to the platform of your choice.\n\nWorking with CapacitorJS, the power of native device features is there for you to integrate into your application. These features include GPS, Haptics, Camera, Filesystem, etc. When I structure a NuxtJS frontend, I like to design it in a way that allows me to re-use important modules through-out components, pages, and layouts.\n\n<!--more-->\n\n\n## Making CapacitorJS Plugins Globally Availble\n\nAfter you've run through the install of CapacitorJS, you have a variety of plugins available for you to [integrate into your app](https://capacitorjs.com/docs/apis). Let's check out the [Geolocation plugin](https://capacitorjs.com/docs/apis/geolocation) for a good example. To use the Geolocation plugin, you have to first import `Plugins` from the `@capacitor/core` library:\n\n```typescript\nimport { Plugins } from '@capacitor/core';\n```\n\nThen decouple the `Geolocation` plugin from the `Plugins` object:\n\n```typescript\nconst { Geolocation } = Plugins;\n```\n\nFrom here, you can make calls to the `Geolocation` plugin within your components. This works really well! However, in a NuxtJS setting I like to make these plugins globaly avaliable by wrapping them in a NuxtJS plugin. Why would you need to do this? Doesn't this add more work? Besides allowing you to access the plugins globally which cleans up how much you need to import, there's one main reason you'd do this: Server-side Rendering.\n\nServer-side Rendering is extremely important if you using NuxtJS with CapacitorJS for mobile AND web. Besides the speed of your application, if you don't server-side render, your app won't be optimized for search engines. Since NuxtJS makes the headaches of SSR a thing of the past, let's optimize our app to make use of both SSR and CapcitorJS Plugins.\n\nUsing [NuxtJS plugin architecture](https://nuxtjs.org/guide/plugins/#inject-in-root--context), you can make a function available across the entire application. This is what we will be doing with the CapacitorJS plugins. Let's use the Geolocation plugin as our example.\n\nWithin the root directory of your NuxtJS install, there's a `/plugins` directory. In that directory add a file `geolocation.js` and populate it with the following code:\n\n```typescript\nimport { Plugins } from '@capacitor/core';\n\nconst { Geolocation } = Plugins;\n\nexport default function ({ app }, inject) {\n  inject('CapacitorGeolocation', Geolocation);\n}\n```\n\nThis should look very similar to how you would normally incorporate a CapacitorJS plugin into your application, however, we are wrapping it within a NuxtJS plugin. What this does is creates a function that accepts a decoupled `app` variable (your entire NuxtJS app), and an `inject()` method as parameters. We then take `inject()` method and pass two parameters. The first parameter is the key in how you will globally access the plugin (we will discuss soon). The second parameter is the `Geolocation` plugin from Capacitor that we included on top of our plugin.\n\nWe now have a NuxtJS plugin that injects a CapacitorJS plugin globally. This will work with pretty much any of the CapacitorJS plugins. The next step is to make NuxtJS aware of this plugin and make sure we don't run into any SSR errors!\n\n## Preventing Server-side Rendering (SSR) errors\n\nNow that we have our plugin created, we have to make NuxtJS aware of it. NuxtJS ships with a wonderful `nuxt.config.js` file that sits at the root of the install. In this file, there's a key called `plugins` that contains an array.\nIn this array, we need to register our NuxtJS plugin that wraps our CapacitorJS plugin. To do that, add the following code:\n\n```typescript\nplugins: [\n    {\n      src: '~/plugins/capacitor.js',\n      mode: 'client'\n    },\n}\n```\n\nThe reason we chose this way is so we can use `mode: 'client'`. This is the crucial piece that makes CapacitorJS plugins work in your NuxtJS app without any SSR errors. So most CapacitorJS plugins require a Browser object to work with. When loading up the compiled code in the browser of your choice, this isn't an issue, a Browser object exists. However, when server-side rendering your application, the Browser object does NOT exist. This will cause a variety of errors and your app won't build correctly.\n\nThe small object that we included in the `plugins` array includes a `src` key which is the source of the plugin. It also includes a `mode` key which is set to `client`. This will ignore the plugin if you are building it through SSR, but include the plugin in the final package when it's sent to the browser.\n\nIf you are just building a mobile application, you are probably just compiling as a Single Page Application. Choosing to compile as an SPA or SSR, the plugin will be included the same. If you are building a web and mobile application from the same code-base, you can swap out the compilation mode and your CapacitorJS plugin will work as expected!\n\nNow that we have our plugin registered globally, how do we access it?\n\n## Accessing Plugins within NuxtJS Pages and Components\n\nSince we have our plugin registered globally within our NuxtJS app, we can access it from any component. Let's say we want to get the current coordinates of our user on all platforms. We'd call the following method within our component:\n\n```typescript\nconst coordinates = await this.$CapacitorGeolocation.getCurrentPosition();\n```\n\nSince the method itself is asynchronous, we can use the `async/await` syntax and grab the coordinates. Let's break down the structure of this method call: First we have `this` which references our NuxtJS application. Next, we reference the injected CapacitorJS Geolcation plugin by the name we provided, `$CapacitorGeolocation`. From there, we have full access to any of the CapacitorJS Geolocation plugin's methods that have been documented! In this example we call the `getCurrentPosition()` method which returns the coordinates of the current user.\n\nBy structuring the plugins this way, we can use either SPA/SSR build methods and have access to the CapacitorJS plugins from anywhere within the application. If you want to learn more aobut how to build an API along with your own Web + Mobile Applications, we have [a book available](https://serversideup.net/ultimate-guide-to-building-apis-and-spas-with-laravel-and-vuejs/). In this book we go through the entire process of centralizing front end codebases and developing your own API with secure authentication practices. The book uses Laravel PHP for the API and NuxtJS + CapacitorJS for the frontend. You will learn how to build an app called ROAST which is available on the [web](https://roastandbrew.coffee/), [iOS App Store](https://apps.apple.com/us/app/roast-brew-coffee/id1510419686) and [Android App Store](https://play.google.com/store/apps/details?id=coffee.roastandbrew.mobile) and browse the source code behind it.\n\nHope this helps and I can't wait to see what gets created with CapacitorJS!\n","preview":"<blockquote>\n<p>The following is a guest blog post from Dan Pastori of <a href=\"https://serversideup.net\">Server Side Up</a>. Server Side Up is an online community that shares tutorials and resources about Vuejs, Laravel, Wordpress, and more recently have started creating resources on how to deliver native apps with Capacitor.</p>\n</blockquote>\n<p>Using CapacitorJS with NuxtJS is a perfect combination. NuxtJS allows you to develop powerful, modern fronteneds using VueJS. Combined with CapacitorJS, you can take those modern frontends, compilie them to mobile, and deploy to the platform of your choice.</p>\n<p>Working with CapacitorJS, the power of native device features is there for you to integrate into your application. These features include GPS, Haptics, Camera, Filesystem, etc. When I structure a NuxtJS frontend, I like to design it in a way that allows me to re-use important modules through-out components, pages, and layouts.</p>\n","html":"<blockquote>\n<p>The following is a guest blog post from Dan Pastori of <a href=\"https://serversideup.net\">Server Side Up</a>. Server Side Up is an online community that shares tutorials and resources about Vuejs, Laravel, Wordpress, and more recently have started creating resources on how to deliver native apps with Capacitor.</p>\n</blockquote>\n<p>Using CapacitorJS with NuxtJS is a perfect combination. NuxtJS allows you to develop powerful, modern fronteneds using VueJS. Combined with CapacitorJS, you can take those modern frontends, compilie them to mobile, and deploy to the platform of your choice.</p>\n<p>Working with CapacitorJS, the power of native device features is there for you to integrate into your application. These features include GPS, Haptics, Camera, Filesystem, etc. When I structure a NuxtJS frontend, I like to design it in a way that allows me to re-use important modules through-out components, pages, and layouts.</p>\n<!--more-->\n\n\n<h2 id=\"making-capacitorjs-plugins-globally-availble\">Making CapacitorJS Plugins Globally Availble</h2>\n<p>After you&#39;ve run through the install of CapacitorJS, you have a variety of plugins available for you to <a href=\"https://capacitorjs.com/docs/apis\">integrate into your app</a>. Let&#39;s check out the <a href=\"https://capacitorjs.com/docs/apis/geolocation\">Geolocation plugin</a> for a good example. To use the Geolocation plugin, you have to first import <code>Plugins</code> from the <code>@capacitor/core</code> library:</p>\n<pre><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then decouple the <code>Geolocation</code> plugin from the <code>Plugins</code> object:</p>\n<pre><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Geolocation <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Plugins<span class=\"token punctuation\">;</span></code></pre>\n<p>From here, you can make calls to the <code>Geolocation</code> plugin within your components. This works really well! However, in a NuxtJS setting I like to make these plugins globaly avaliable by wrapping them in a NuxtJS plugin. Why would you need to do this? Doesn&#39;t this add more work? Besides allowing you to access the plugins globally which cleans up how much you need to import, there&#39;s one main reason you&#39;d do this: Server-side Rendering.</p>\n<p>Server-side Rendering is extremely important if you using NuxtJS with CapacitorJS for mobile AND web. Besides the speed of your application, if you don&#39;t server-side render, your app won&#39;t be optimized for search engines. Since NuxtJS makes the headaches of SSR a thing of the past, let&#39;s optimize our app to make use of both SSR and CapcitorJS Plugins.</p>\n<p>Using <a href=\"https://nuxtjs.org/guide/plugins/#inject-in-root--context\">NuxtJS plugin architecture</a>, you can make a function available across the entire application. This is what we will be doing with the CapacitorJS plugins. Let&#39;s use the Geolocation plugin as our example.</p>\n<p>Within the root directory of your NuxtJS install, there&#39;s a <code>/plugins</code> directory. In that directory add a file <code>geolocation.js</code> and populate it with the following code:</p>\n<pre><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Geolocation <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Plugins<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> inject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CapacitorGeolocation'</span><span class=\"token punctuation\">,</span> Geolocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This should look very similar to how you would normally incorporate a CapacitorJS plugin into your application, however, we are wrapping it within a NuxtJS plugin. What this does is creates a function that accepts a decoupled <code>app</code> variable (your entire NuxtJS app), and an <code>inject()</code> method as parameters. We then take <code>inject()</code> method and pass two parameters. The first parameter is the key in how you will globally access the plugin (we will discuss soon). The second parameter is the <code>Geolocation</code> plugin from Capacitor that we included on top of our plugin.</p>\n<p>We now have a NuxtJS plugin that injects a CapacitorJS plugin globally. This will work with pretty much any of the CapacitorJS plugins. The next step is to make NuxtJS aware of this plugin and make sure we don&#39;t run into any SSR errors!</p>\n<h2 id=\"preventing-server-side-rendering-ssr-errors\">Preventing Server-side Rendering (SSR) errors</h2>\n<p>Now that we have our plugin created, we have to make NuxtJS aware of it. NuxtJS ships with a wonderful <code>nuxt.config.js</code> file that sits at the root of the install. In this file, there&#39;s a key called <code>plugins</code> that contains an array.\nIn this array, we need to register our NuxtJS plugin that wraps our CapacitorJS plugin. To do that, add the following code:</p>\n<pre><code class=\"language-typescript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      src<span class=\"token operator\">:</span> <span class=\"token string\">'~/plugins/capacitor.js'</span><span class=\"token punctuation\">,</span>\n      mode<span class=\"token operator\">:</span> <span class=\"token string\">'client'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The reason we chose this way is so we can use <code>mode: &#39;client&#39;</code>. This is the crucial piece that makes CapacitorJS plugins work in your NuxtJS app without any SSR errors. So most CapacitorJS plugins require a Browser object to work with. When loading up the compiled code in the browser of your choice, this isn&#39;t an issue, a Browser object exists. However, when server-side rendering your application, the Browser object does NOT exist. This will cause a variety of errors and your app won&#39;t build correctly.</p>\n<p>The small object that we included in the <code>plugins</code> array includes a <code>src</code> key which is the source of the plugin. It also includes a <code>mode</code> key which is set to <code>client</code>. This will ignore the plugin if you are building it through SSR, but include the plugin in the final package when it&#39;s sent to the browser.</p>\n<p>If you are just building a mobile application, you are probably just compiling as a Single Page Application. Choosing to compile as an SPA or SSR, the plugin will be included the same. If you are building a web and mobile application from the same code-base, you can swap out the compilation mode and your CapacitorJS plugin will work as expected!</p>\n<p>Now that we have our plugin registered globally, how do we access it?</p>\n<h2 id=\"accessing-plugins-within-nuxtjs-pages-and-components\">Accessing Plugins within NuxtJS Pages and Components</h2>\n<p>Since we have our plugin registered globally within our NuxtJS app, we can access it from any component. Let&#39;s say we want to get the current coordinates of our user on all platforms. We&#39;d call the following method within our component:</p>\n<pre><code class=\"language-typescript\"><span class=\"token keyword\">const</span> coordinates <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$CapacitorGeolocation<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Since the method itself is asynchronous, we can use the <code>async/await</code> syntax and grab the coordinates. Let&#39;s break down the structure of this method call: First we have <code>this</code> which references our NuxtJS application. Next, we reference the injected CapacitorJS Geolcation plugin by the name we provided, <code>$CapacitorGeolocation</code>. From there, we have full access to any of the CapacitorJS Geolocation plugin&#39;s methods that have been documented! In this example we call the <code>getCurrentPosition()</code> method which returns the coordinates of the current user.</p>\n<p>By structuring the plugins this way, we can use either SPA/SSR build methods and have access to the CapacitorJS plugins from anywhere within the application. If you want to learn more aobut how to build an API along with your own Web + Mobile Applications, we have <a href=\"https://serversideup.net/ultimate-guide-to-building-apis-and-spas-with-laravel-and-vuejs/\">a book available</a>. In this book we go through the entire process of centralizing front end codebases and developing your own API with secure authentication practices. The book uses Laravel PHP for the API and NuxtJS + CapacitorJS for the frontend. You will learn how to build an app called ROAST which is available on the <a href=\"https://roastandbrew.coffee/\">web</a>, <a href=\"https://apps.apple.com/us/app/roast-brew-coffee/id1510419686\">iOS App Store</a> and <a href=\"https://play.google.com/store/apps/details?id=coffee.roastandbrew.mobile\">Android App Store</a> and browse the source code behind it.</p>\n<p>Hope this helps and I can&#39;t wait to see what gets created with CapacitorJS!</p>\n","meta":{"title":"Integrating CapacitorJS Plugins with NuxtJS","slug":"integrating-capacitorjs-plugins-with-nuxtjs","description":"Learn how to integrate Capacitor with NuxtJS","date":"2020-08-28T08:00:00.000Z","author":"Dan Pastori <dan@521dimensions.com>","authorUrl":"https://twitter.com/danpastori"}},{"title":"Turn your Angular App Native","description":"Any Angular app can be turned into a native app with Capacitor","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"turn-your-angular-app-native","date":"2020-08-17T08:00:00.000Z","contents":"---\ntitle: Turn your Angular App Native\nslug: turn-your-angular-app-native\ndate: 2020-08-17 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\ndescription: Any Angular app can be turned into a native app with Capacitor\n---\n\nAngular is used to build seriously large applications, but did you know you can target iOS and Android (and PWA) from your codebase without many changes to your existing Angular app?\n\nWith Capacitor, any Angular app can be turned into an iOS and Android app with full access to native APIs and OS controls. Capacitor does this by providing a native runtime for web apps with a bridge to communicate from the web app to the native layer, along with many [Native APIs](https://capacitorjs.com/docs/apis) and access to hundreds more from the community.\n\nPerhaps a surprise to many Angular developers, Angular is already used to power a significant number of app store apps ([at least 15%](https://appfigures.com/top-sdks/development/apps)). This is because [Ionic Framework](https://ionicframework.com/) has been widely used as a mobile UI framework for Angular since the AngularJS days and many Cordova apps used Angular over the years.\n\n<!--more-->\n\n## Is this like Cordova?\n\nCapacitor is similar to Cordova (and Electron, for that matter) in that it runs a web app in a native environment and adds Native API access to the web app. \n\nCompared to Cordova, Capacitor is a relatively new, ground up effort to build a modern native mobile runtime for cross-platform iOS, Android, and PWA apps. Capacitor was built by the team behind [Ionic Framework](https://ionicframework.com/) to provide an alternative to Cordova for this native runtime layer. You can read more about the [motivation for creating Capacitor](https://capacitorjs.com/docs/cordova) on the docs.\n\nCapacitor has backwards compatibility with many Cordova plugins so migration is [straightforward](https://capacitorjs.com/cordova).\n\n## How is this different from Ionic Framework?\n\nCapacitor and Ionic Framework is like comparing Apples to Oranges.\n\nCapacitor (like Cordova), provides a native runtime for web apps across multiple platforms. It's the part of your app that supports adding native code and plugins, and manages communication between a web app running in a web view, and the operating system below. Think of Capacitor like Electron but for Mobile (though Capacitor and Electron are very different and Capacitor can be much more efficient, so doesn't have the downsides of Electron). Thus, Capacitor simply provides an empty web frame and extra mobile APIs, it still needs you to provide a UI for the app.\n\nIn contrast, Ionic Framework is a mobile-focused UI library for web apps. Think of Ionic Framework like Bootstrap or Material. Ionic Framework provides iOS and Android specific UI controls and experiences such as navigation/transitions, modals, buttons, form controls, swipeable items, and a ton more.\n\nSo, your mobile web app will use Capacitor to target iOS and Android (and PWA), and use a UI library like Ionic Framework to provide the mobile experience users expect.\n\nCapacitor does not require Ionic Framework (though it's certainly one of the very best options), so Capacitor can work with any popular web-based UI library.\n\n## How does this compare to React Native or NativeScript?\n\nNativeScript and React Native are two popular mobile app frameworks that enable developers to build native apps using JavaScript.\n\nThe biggest difference between Capacitor and these other options is that Capacitor uses standard web development technology, tooling, and developer experience.  This means Capacitor can turn *any web app* into a native app. React Native and NativeScript, in contrast, are frameworks that must be targeted from the beginning of an app's code base and provide a \"web like\" experience that is not a true browser environment.\n\nThis has some advantages in that system controls are used exclusively, but in this case it's important to remember that these solutions will not enable you to take an existing Angular app, or one built with popular Angular libraries like Angular Material or Ionic Framework, and deploy it to the App Store. Instead, your app would need to be written from the ground up to use them and web libraries would not be compatible.\n\nCapacitor, in contrast, supports any app that runs in the browser and provides a true web development experience.\n\n## Who's using Capacitor?\n\nCapacitor is widely used in startups and the Fortune 1000. Companies like RBI (Burger King/Popeyes), Blue Cross Blue Shield, Aflac, and IBM are all using Capacitor to target iOS and Android with their web development teams.\n\nCapacitor is backed by [Ionic](https://ionic.io/), the leader in cross-platform mobile development. Ionic provides [enterprise security features and support](https://ionicframework.com/native) for teams that need more than what's available in the community version.\n\n## Get Started\n\nTo get started building iOS, Android, and Progressive Web Apps take a look at the [Angular Getting Started](https://capacitorjs.com/solution/angular) guide or follow the standard [Getting Started](https://capacitorjs.com/docs/getting-started) experience.","preview":"<p>Angular is used to build seriously large applications, but did you know you can target iOS and Android (and PWA) from your codebase without many changes to your existing Angular app?</p>\n<p>With Capacitor, any Angular app can be turned into an iOS and Android app with full access to native APIs and OS controls. Capacitor does this by providing a native runtime for web apps with a bridge to communicate from the web app to the native layer, along with many <a href=\"https://capacitorjs.com/docs/apis\">Native APIs</a> and access to hundreds more from the community.</p>\n<p>Perhaps a surprise to many Angular developers, Angular is already used to power a significant number of app store apps (<a href=\"https://appfigures.com/top-sdks/development/apps\">at least 15%</a>). This is because <a href=\"https://ionicframework.com/\">Ionic Framework</a> has been widely used as a mobile UI framework for Angular since the AngularJS days and many Cordova apps used Angular over the years.</p>\n","html":"<p>Angular is used to build seriously large applications, but did you know you can target iOS and Android (and PWA) from your codebase without many changes to your existing Angular app?</p>\n<p>With Capacitor, any Angular app can be turned into an iOS and Android app with full access to native APIs and OS controls. Capacitor does this by providing a native runtime for web apps with a bridge to communicate from the web app to the native layer, along with many <a href=\"https://capacitorjs.com/docs/apis\">Native APIs</a> and access to hundreds more from the community.</p>\n<p>Perhaps a surprise to many Angular developers, Angular is already used to power a significant number of app store apps (<a href=\"https://appfigures.com/top-sdks/development/apps\">at least 15%</a>). This is because <a href=\"https://ionicframework.com/\">Ionic Framework</a> has been widely used as a mobile UI framework for Angular since the AngularJS days and many Cordova apps used Angular over the years.</p>\n<!--more-->\n\n<h2 id=\"is-this-like-cordova\">Is this like Cordova?</h2>\n<p>Capacitor is similar to Cordova (and Electron, for that matter) in that it runs a web app in a native environment and adds Native API access to the web app. </p>\n<p>Compared to Cordova, Capacitor is a relatively new, ground up effort to build a modern native mobile runtime for cross-platform iOS, Android, and PWA apps. Capacitor was built by the team behind <a href=\"https://ionicframework.com/\">Ionic Framework</a> to provide an alternative to Cordova for this native runtime layer. You can read more about the <a href=\"https://capacitorjs.com/docs/cordova\">motivation for creating Capacitor</a> on the docs.</p>\n<p>Capacitor has backwards compatibility with many Cordova plugins so migration is <a href=\"https://capacitorjs.com/cordova\">straightforward</a>.</p>\n<h2 id=\"how-is-this-different-from-ionic-framework\">How is this different from Ionic Framework?</h2>\n<p>Capacitor and Ionic Framework is like comparing Apples to Oranges.</p>\n<p>Capacitor (like Cordova), provides a native runtime for web apps across multiple platforms. It&#39;s the part of your app that supports adding native code and plugins, and manages communication between a web app running in a web view, and the operating system below. Think of Capacitor like Electron but for Mobile (though Capacitor and Electron are very different and Capacitor can be much more efficient, so doesn&#39;t have the downsides of Electron). Thus, Capacitor simply provides an empty web frame and extra mobile APIs, it still needs you to provide a UI for the app.</p>\n<p>In contrast, Ionic Framework is a mobile-focused UI library for web apps. Think of Ionic Framework like Bootstrap or Material. Ionic Framework provides iOS and Android specific UI controls and experiences such as navigation/transitions, modals, buttons, form controls, swipeable items, and a ton more.</p>\n<p>So, your mobile web app will use Capacitor to target iOS and Android (and PWA), and use a UI library like Ionic Framework to provide the mobile experience users expect.</p>\n<p>Capacitor does not require Ionic Framework (though it&#39;s certainly one of the very best options), so Capacitor can work with any popular web-based UI library.</p>\n<h2 id=\"how-does-this-compare-to-react-native-or-nativescript\">How does this compare to React Native or NativeScript?</h2>\n<p>NativeScript and React Native are two popular mobile app frameworks that enable developers to build native apps using JavaScript.</p>\n<p>The biggest difference between Capacitor and these other options is that Capacitor uses standard web development technology, tooling, and developer experience.  This means Capacitor can turn <em>any web app</em> into a native app. React Native and NativeScript, in contrast, are frameworks that must be targeted from the beginning of an app&#39;s code base and provide a &quot;web like&quot; experience that is not a true browser environment.</p>\n<p>This has some advantages in that system controls are used exclusively, but in this case it&#39;s important to remember that these solutions will not enable you to take an existing Angular app, or one built with popular Angular libraries like Angular Material or Ionic Framework, and deploy it to the App Store. Instead, your app would need to be written from the ground up to use them and web libraries would not be compatible.</p>\n<p>Capacitor, in contrast, supports any app that runs in the browser and provides a true web development experience.</p>\n<h2 id=\"whos-using-capacitor\">Who&#39;s using Capacitor?</h2>\n<p>Capacitor is widely used in startups and the Fortune 1000. Companies like RBI (Burger King/Popeyes), Blue Cross Blue Shield, Aflac, and IBM are all using Capacitor to target iOS and Android with their web development teams.</p>\n<p>Capacitor is backed by <a href=\"https://ionic.io/\">Ionic</a>, the leader in cross-platform mobile development. Ionic provides <a href=\"https://ionicframework.com/native\">enterprise security features and support</a> for teams that need more than what&#39;s available in the community version.</p>\n<h2 id=\"get-started\">Get Started</h2>\n<p>To get started building iOS, Android, and Progressive Web Apps take a look at the <a href=\"https://capacitorjs.com/solution/angular\">Angular Getting Started</a> guide or follow the standard <a href=\"https://capacitorjs.com/docs/getting-started\">Getting Started</a> experience.</p>\n","meta":{"title":"Turn your Angular App Native","slug":"turn-your-angular-app-native","date":"2020-08-17T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","description":"Any Angular app can be turned into a native app with Capacitor"}},{"title":"How Capacitor Works","description":"How does Capacitor, a cross-platform native runtime for web apps, work on the inside?","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"how-capacitor-works","date":"2020-08-13T08:00:00.000Z","contents":"---\ntitle: How Capacitor Works\nslug: how-capacitor-works\ndescription: How does Capacitor, a cross-platform native runtime for web apps, work on the inside?\ndate: 2020-08-13 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\n---\n\nCapacitor is a cross-platform native runtime for web apps, or hybrid apps, if you prefer. That's quite a mouthful, what does that mean exactly?\n\nAt a high level, that means Capacitor takes a typical browser-based web app, and then packages it up to run on iOS, Android, and PWA with access to native platform features and OS-level controls.\n\nCapacitor then acts as the _runtime_ facilitating communication between the web app and the underlying OS.\n\nLet's dig in and explore how Capacitor works under the hood.\n\n<!--more-->\n\n## The basics\n\nAt a high level, Capacitor does this:\n\n![Basic Capacitor Diagram](/assets/img/blog/how-capacitor-works/basic.png)\n\nBut that's pretty simplistic, if we zoom in a bit and bring in your app code, we see that Capacitor is made up of a few individual components:\n\n![Zoomed Capacitor App](/assets/img/blog/how-capacitor-works/zoomed.png)\n\nIn this diagram, we see that your web app runs inside of a Web View. A Web View is a native OS control that provides a streamlined, chrome-less browser instance. If you imagine a typical web browser, a ton of overhead comes from the chrome and experience around the actual browsing frame. A Web View is just one instance of that browsing frame, so it's very light weight.\n\nMost of the magic happens in the Native Bridge and the Runtime, so let's explore those:\n\n## Native Bridge\n\n![Bridge](/assets/img/blog/how-capacitor-works/bridge.png)\n\nThat Web View needs a way to access native functionality, interact with OS level native controls, and access custom native code or 3rd party plugins. It does that using the Native Bridge inside of Capacitor.\n\nThe Native Bridge is where Capacitor's *runtime* JS API, including all known native plugins and their methods, are exported to the Web View. The runtime API is different from the `@capacitor/core` API that is imported directly into your web app, but they work together to enable Capacitor APIs to work across all supported platforms.\n\nCapacitor loads all known plugins that have been installed or coded directly into the native project, and then exports `window.Capacitor.Plugins` containing every loaded plugin and every known method that plugin has exported to the Web View.\n\nFinally, the bridge manages message passing and tracking native invocations between the Web View and the native runtime.\n\n## Runtime\n\n![Runtime](/assets/img/blog/how-capacitor-works/runtime.png)\n\nThe Native runtime is where calls from the Web View get routed to native plugins and custom native code.\n\nWhen the app first starts, the runtime loads any installed plugins and custom native plugins. The runtime also initializes the Web View and injects the JavaScript Symbols for all known plugins into the Web View.\n\nWhen plugins are invoked, the runtime processes each invocation as a message, constructs a method call to the corresponding plugin, and executes it.\n\nAll calls in Capacitor are asynchronous, so the runtime manages a set of \"active\" calls that have yet to be completed. These calls might be as simple as calling a Native API, or as complicated as opening an intent and processing the result of another app (such as the Camera on Android).\n\nOnce those calls complete, a message is constructed and sent back to the Web View, which ultimately causes the original plugin call in your app to resolve.\n\n## Capacitor apps are native\n\n![Native](/assets/img/blog/how-capacitor-works/native.png)\n\nCapacitor works by extending a Web View with additional functionality and indirect access to full native functionality through plugins and custom native code.\n\nCapacitor apps _are native apps_. The project files used to build the native iOS and Android binaries is a plain iOS app for Xcode and a plain Android app using Gradle. This means teams can add arbitrary native code to the app and invoke it from the Web View through the Capacitor Plugin API. If you'd like to explore this in detail, read how [Capacitor Apps are Native Apps](https://medium.com/@maxlynch/cordova-ionic-apps-are-native-apps-64f9e1a995d9).\n\nIn the diagram above, the native project contains our built web assets which will be some kind of modern JS app that is built and copied to the native project. That modern JS app imports the `@capacitor/core` library to code against the JavaScript symbols Capacitor generates at runtime (and to support Web APIs like [Camera](https://capacitorjs.com/docs/apis/camera) or [Share](https://capacitorjs.com/docs/apis/share) for PWAs).\n\nDuring the `copy` step from the Capacitor CLI tools, the `native-bridge.js` is copied to the project which contains Capacitor's message passing bridge on the Web View side.\n\nFinally, any Capacitor plugins or custom native code will be in the project as well, along with any libraries that code requires.\n\nOne note about Progressive Web Apps (PWA): when building a PWA, you simply need to deploy your built web app somewhere to the web. There really is no additional step because the `@capacitor/core` library contains all the functionality needed for Capacitor plugins that have web support, such as [Camera](https://capacitorjs.com/docs/apis/camera), [Filesystem](https://capacitorjs.com/docs/apis/filesystem), or [Share](https://capacitorjs.com/docs/apis/share).\n\n## Conclusion\n\nCapacitor provides a runtime for Web Apps, so teams typically spend most of their time building their web app, making sure it works well on mobile form factors and has a mobile UI experience that users expect (UI frameworks like [Ionic Framework](https://ionicframework.com/) provide this experience out of the box).\n\nThis is in contrast to many other cross-platform mobile technologies that use native system controls. While there are benefits to doing that, the benefits to using Capacitor are a pure web development experience, truly write once run anywhere, and compatibility with the full web development ecosystem and hiring market.","preview":"<p>Capacitor is a cross-platform native runtime for web apps, or hybrid apps, if you prefer. That&#39;s quite a mouthful, what does that mean exactly?</p>\n<p>At a high level, that means Capacitor takes a typical browser-based web app, and then packages it up to run on iOS, Android, and PWA with access to native platform features and OS-level controls.</p>\n<p>Capacitor then acts as the <em>runtime</em> facilitating communication between the web app and the underlying OS.</p>\n<p>Let&#39;s dig in and explore how Capacitor works under the hood.</p>\n","html":"<p>Capacitor is a cross-platform native runtime for web apps, or hybrid apps, if you prefer. That&#39;s quite a mouthful, what does that mean exactly?</p>\n<p>At a high level, that means Capacitor takes a typical browser-based web app, and then packages it up to run on iOS, Android, and PWA with access to native platform features and OS-level controls.</p>\n<p>Capacitor then acts as the <em>runtime</em> facilitating communication between the web app and the underlying OS.</p>\n<p>Let&#39;s dig in and explore how Capacitor works under the hood.</p>\n<!--more-->\n\n<h2 id=\"the-basics\">The basics</h2>\n<p>At a high level, Capacitor does this:</p>\n<p><img src=\"/assets/img/blog/how-capacitor-works/basic.png\" alt=\"Basic Capacitor Diagram\"></p>\n<p>But that&#39;s pretty simplistic, if we zoom in a bit and bring in your app code, we see that Capacitor is made up of a few individual components:</p>\n<p><img src=\"/assets/img/blog/how-capacitor-works/zoomed.png\" alt=\"Zoomed Capacitor App\"></p>\n<p>In this diagram, we see that your web app runs inside of a Web View. A Web View is a native OS control that provides a streamlined, chrome-less browser instance. If you imagine a typical web browser, a ton of overhead comes from the chrome and experience around the actual browsing frame. A Web View is just one instance of that browsing frame, so it&#39;s very light weight.</p>\n<p>Most of the magic happens in the Native Bridge and the Runtime, so let&#39;s explore those:</p>\n<h2 id=\"native-bridge\">Native Bridge</h2>\n<p><img src=\"/assets/img/blog/how-capacitor-works/bridge.png\" alt=\"Bridge\"></p>\n<p>That Web View needs a way to access native functionality, interact with OS level native controls, and access custom native code or 3rd party plugins. It does that using the Native Bridge inside of Capacitor.</p>\n<p>The Native Bridge is where Capacitor&#39;s <em>runtime</em> JS API, including all known native plugins and their methods, are exported to the Web View. The runtime API is different from the <code>@capacitor/core</code> API that is imported directly into your web app, but they work together to enable Capacitor APIs to work across all supported platforms.</p>\n<p>Capacitor loads all known plugins that have been installed or coded directly into the native project, and then exports <code>window.Capacitor.Plugins</code> containing every loaded plugin and every known method that plugin has exported to the Web View.</p>\n<p>Finally, the bridge manages message passing and tracking native invocations between the Web View and the native runtime.</p>\n<h2 id=\"runtime\">Runtime</h2>\n<p><img src=\"/assets/img/blog/how-capacitor-works/runtime.png\" alt=\"Runtime\"></p>\n<p>The Native runtime is where calls from the Web View get routed to native plugins and custom native code.</p>\n<p>When the app first starts, the runtime loads any installed plugins and custom native plugins. The runtime also initializes the Web View and injects the JavaScript Symbols for all known plugins into the Web View.</p>\n<p>When plugins are invoked, the runtime processes each invocation as a message, constructs a method call to the corresponding plugin, and executes it.</p>\n<p>All calls in Capacitor are asynchronous, so the runtime manages a set of &quot;active&quot; calls that have yet to be completed. These calls might be as simple as calling a Native API, or as complicated as opening an intent and processing the result of another app (such as the Camera on Android).</p>\n<p>Once those calls complete, a message is constructed and sent back to the Web View, which ultimately causes the original plugin call in your app to resolve.</p>\n<h2 id=\"capacitor-apps-are-native\">Capacitor apps are native</h2>\n<p><img src=\"/assets/img/blog/how-capacitor-works/native.png\" alt=\"Native\"></p>\n<p>Capacitor works by extending a Web View with additional functionality and indirect access to full native functionality through plugins and custom native code.</p>\n<p>Capacitor apps <em>are native apps</em>. The project files used to build the native iOS and Android binaries is a plain iOS app for Xcode and a plain Android app using Gradle. This means teams can add arbitrary native code to the app and invoke it from the Web View through the Capacitor Plugin API. If you&#39;d like to explore this in detail, read how <a href=\"https://medium.com/@maxlynch/cordova-ionic-apps-are-native-apps-64f9e1a995d9\">Capacitor Apps are Native Apps</a>.</p>\n<p>In the diagram above, the native project contains our built web assets which will be some kind of modern JS app that is built and copied to the native project. That modern JS app imports the <code>@capacitor/core</code> library to code against the JavaScript symbols Capacitor generates at runtime (and to support Web APIs like <a href=\"https://capacitorjs.com/docs/apis/camera\">Camera</a> or <a href=\"https://capacitorjs.com/docs/apis/share\">Share</a> for PWAs).</p>\n<p>During the <code>copy</code> step from the Capacitor CLI tools, the <code>native-bridge.js</code> is copied to the project which contains Capacitor&#39;s message passing bridge on the Web View side.</p>\n<p>Finally, any Capacitor plugins or custom native code will be in the project as well, along with any libraries that code requires.</p>\n<p>One note about Progressive Web Apps (PWA): when building a PWA, you simply need to deploy your built web app somewhere to the web. There really is no additional step because the <code>@capacitor/core</code> library contains all the functionality needed for Capacitor plugins that have web support, such as <a href=\"https://capacitorjs.com/docs/apis/camera\">Camera</a>, <a href=\"https://capacitorjs.com/docs/apis/filesystem\">Filesystem</a>, or <a href=\"https://capacitorjs.com/docs/apis/share\">Share</a>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Capacitor provides a runtime for Web Apps, so teams typically spend most of their time building their web app, making sure it works well on mobile form factors and has a mobile UI experience that users expect (UI frameworks like <a href=\"https://ionicframework.com/\">Ionic Framework</a> provide this experience out of the box).</p>\n<p>This is in contrast to many other cross-platform mobile technologies that use native system controls. While there are benefits to doing that, the benefits to using Capacitor are a pure web development experience, truly write once run anywhere, and compatibility with the full web development ecosystem and hiring market.</p>\n","meta":{"title":"How Capacitor Works","slug":"how-capacitor-works","description":"How does Capacitor, a cross-platform native runtime for web apps, work on the inside?","date":"2020-08-13T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch"}},{"title":"Native React Apps Without React Native","description":"Build app store apps using React web libraries and Capacitor","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"native-react-apps-without-react-native","date":"2020-07-14T08:00:00.000Z","contents":"---\ntitle: Native React Apps Without React Native\nslug: native-react-apps-without-react-native\ndate: 2020-07-14 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\ndescription: Build app store apps using React web libraries and Capacitor\nfeaturedImage: /assets/img/blog/native-wout-react-native.png\nfeaturedImageAlt: Native React Apps Without React Native\n---\n\nIn the React world, the primary way to build native iOS and Android apps has been React Native. Created by Facebook in 2015, React Native enables developers to use their React skills to build iOS and Android apps using platform native UI elements. React Native is popular and widely used, and it’s a great solution for many teams.\n\nHowever, React Native comes with a number of tradeoffs. First, it requires developers to build in a React Native specific way, using views/JSX for each platform, and using libraries that support react-native (as opposed to most React libraries that support react-dom). But perhaps most importantly, React Native is not a web environment, so it’s not possible for teams to take their web-based React apps and libraries to deploy native apps.\n\nThe net effect is that it’s not possible to take, say, a Material-UI React web app, and deploy it natively to the Apple App Store or Google Play Store with React Native.\n\nTo do that, we need to take a look at [Capacitor](https://capacitorjs.com/) -- a native runtime for cross-platform web apps, including any and all React web apps.\n\n<!--more-->\n\n## Capacitor: Native Runtime for Web Apps\n\n[Capacitor](https://capacitorjs.com/) is sort of an “electron for mobile” that provides a native runtime for any modern web app, so it can run natively on iOS, Android, and the web using the same code. Capacitor provides full native API access through a [powerful plugin system](https://capacitorjs.com/docs/plugins), so apps can access the same level of functionality as any other pure native (or React Native) app.\n\nCapacitor is focused on enabling modern web apps to run on multiple platforms, and embraces browser-built apps. Capacitor is not a native UI abstraction like React Native, though native UI can certainly be used alongside a Capacitor app.\n\nCapacitor apps for iOS and Android [are native apps](https://medium.com/@maxlynch/cordova-ionic-apps-are-native-apps-64f9e1a995d9), they just happen to do a large amount of their work in a primary WebView.\n\nAs a side effect of being web-focused, Capacitor provides a standard web development experience where apps can be built largely in the browser, bringing the experience and tooling web developers have come to love.\n\n## Build Native Apps with Material-UI, Chakra, Ant, Prime, and more\n\nBecause Capacitor provides a native runtime environment for web apps, that means it can be used to turn any React web app into a native app. So apps using [Material-UI](https://material-ui.com/) or [Chakra](https://chakra-ui.com/) or [Prime](https://www.primefaces.org/primereact/) or [Ant](https://ant.design/) or [Ionic Framework](https://ionicframework.com/), or any other React UI library, can be turned into native apps using Capacitor (see our [examples repo](https://github.com/capacitor-community/examples) for real code in a variety of libraries).\n\nThis simply isn’t possible with React Native. Most popular React UI libraries target the web and react-dom, and most web libraries use web technologies like CSS that aren’t supported in React Native (at least not in their native format)\n\n## Bonus: Deploy Progressive Web Apps and Native Apps\n\nOne additional bonus feature of Capacitor is that it works on the web for Progressive Web Apps. That means an app using Capacitor can access many of the same APIs on native mobile but on the web instead. For example, the [Camera](https://capacitorjs.com/docs/apis/camera) and [Share](https://capacitorjs.com/docs/apis/share) APIs work across iOS, Android, and the web with the same code.\n\nWith this capability, teams often can build and ship on three platforms on day one, or even embrace [Progressive Web App First Development](https://ionicframework.com/blog/forget-mobile-first-progressive-web-app-first-is-the-future/), by using Capacitor.\n\n## Transform your React Web App into Native with Capacitor\n\nAdding native functionality and deploying to iOS, Android, and PWA with your existing React web app is easy. Just install Capacitor, drop it into to your project, and add a platform:\n\n```shell\nnpm install @capacitor/cli @capacitor/core\nnpx cap init\nnpx cap add ios\n```\n\nThen, to start using in a web app, import from `@capacitor/core`:\n\n```typescript\nimport { Plugins } from '@capacitor/core';\n\nconst { Share } = Plugins;\nawait Share.share({\n  title: 'My awesome thing',\n  text: 'Check out this really awesome thing',\n  url: 'https://capacitorjs.com/'\n});\n```\n\nThen run your web app:\n\n```shell\nnpm start\n```\n\nCapacitor apps can be built primarily in the browser, but to deploy and test on iOS or Android (simulator or device), open the IDE of choice and run directly in the IDE:\n\n```shell\nnpx cap open ios\n```\n\nFor the full getting started instructions, check out the [Capacitor documentation](https://capacitorjs.com/docs/getting-started).\n\n## Conclusion\n\nReact Native is no longer the only option for React devs to build iOS and Android apps. Capacitor provides a web-focused solution for teams building React web apps to enable them to ship to the app stores and the web with the same code base.\n\nAnd, for teams that are building a new app and interested in exploring a mobile-focused UI library for their Capacitor apps, [Ionic React](https://ionicframework.com/) is a great and popular option.\n\nBeyond React, Capacitor can be used with any modern web app technology, so is a good fit for teams with a diversity of frontend technologies in use, which is another challenge with React Native.\n\nWe're excited about Capacitor in the React ecosystem, and many teams are as well. Today, Capacitor is powering React apps with hundreds of millions of users, and for major brands and [enterprise customers](https://ionicframework.com/customers) like Burger King and Popeye's. Capacitor adoption has been [growing quickly](https://twitter.com/maxlynch/status/1280531102650769408) and given that given that web development with React represents the largest area of React development ([> 17x React Native](https://npmcharts.com/compare/react-native,react-dom?interval=7)), we're thrilled about the potential to help more web devs build cross-platform apps.\n\nCheck out Capacitor today and stay tuned for some exciting updates with the project coming soon: [capacitorjs.com](https://capacitorjs.com/)","preview":"<p>In the React world, the primary way to build native iOS and Android apps has been React Native. Created by Facebook in 2015, React Native enables developers to use their React skills to build iOS and Android apps using platform native UI elements. React Native is popular and widely used, and it’s a great solution for many teams.</p>\n<p>However, React Native comes with a number of tradeoffs. First, it requires developers to build in a React Native specific way, using views/JSX for each platform, and using libraries that support react-native (as opposed to most React libraries that support react-dom). But perhaps most importantly, React Native is not a web environment, so it’s not possible for teams to take their web-based React apps and libraries to deploy native apps.</p>\n<p>The net effect is that it’s not possible to take, say, a Material-UI React web app, and deploy it natively to the Apple App Store or Google Play Store with React Native.</p>\n<p>To do that, we need to take a look at <a href=\"https://capacitorjs.com/\">Capacitor</a> -- a native runtime for cross-platform web apps, including any and all React web apps.</p>\n","html":"<p>In the React world, the primary way to build native iOS and Android apps has been React Native. Created by Facebook in 2015, React Native enables developers to use their React skills to build iOS and Android apps using platform native UI elements. React Native is popular and widely used, and it’s a great solution for many teams.</p>\n<p>However, React Native comes with a number of tradeoffs. First, it requires developers to build in a React Native specific way, using views/JSX for each platform, and using libraries that support react-native (as opposed to most React libraries that support react-dom). But perhaps most importantly, React Native is not a web environment, so it’s not possible for teams to take their web-based React apps and libraries to deploy native apps.</p>\n<p>The net effect is that it’s not possible to take, say, a Material-UI React web app, and deploy it natively to the Apple App Store or Google Play Store with React Native.</p>\n<p>To do that, we need to take a look at <a href=\"https://capacitorjs.com/\">Capacitor</a> -- a native runtime for cross-platform web apps, including any and all React web apps.</p>\n<!--more-->\n\n<h2 id=\"capacitor-native-runtime-for-web-apps\">Capacitor: Native Runtime for Web Apps</h2>\n<p><a href=\"https://capacitorjs.com/\">Capacitor</a> is sort of an “electron for mobile” that provides a native runtime for any modern web app, so it can run natively on iOS, Android, and the web using the same code. Capacitor provides full native API access through a <a href=\"https://capacitorjs.com/docs/plugins\">powerful plugin system</a>, so apps can access the same level of functionality as any other pure native (or React Native) app.</p>\n<p>Capacitor is focused on enabling modern web apps to run on multiple platforms, and embraces browser-built apps. Capacitor is not a native UI abstraction like React Native, though native UI can certainly be used alongside a Capacitor app.</p>\n<p>Capacitor apps for iOS and Android <a href=\"https://medium.com/@maxlynch/cordova-ionic-apps-are-native-apps-64f9e1a995d9\">are native apps</a>, they just happen to do a large amount of their work in a primary WebView.</p>\n<p>As a side effect of being web-focused, Capacitor provides a standard web development experience where apps can be built largely in the browser, bringing the experience and tooling web developers have come to love.</p>\n<h2 id=\"build-native-apps-with-material-ui-chakra-ant-prime-and-more\">Build Native Apps with Material-UI, Chakra, Ant, Prime, and more</h2>\n<p>Because Capacitor provides a native runtime environment for web apps, that means it can be used to turn any React web app into a native app. So apps using <a href=\"https://material-ui.com/\">Material-UI</a> or <a href=\"https://chakra-ui.com/\">Chakra</a> or <a href=\"https://www.primefaces.org/primereact/\">Prime</a> or <a href=\"https://ant.design/\">Ant</a> or <a href=\"https://ionicframework.com/\">Ionic Framework</a>, or any other React UI library, can be turned into native apps using Capacitor (see our <a href=\"https://github.com/capacitor-community/examples\">examples repo</a> for real code in a variety of libraries).</p>\n<p>This simply isn’t possible with React Native. Most popular React UI libraries target the web and react-dom, and most web libraries use web technologies like CSS that aren’t supported in React Native (at least not in their native format)</p>\n<h2 id=\"bonus-deploy-progressive-web-apps-and-native-apps\">Bonus: Deploy Progressive Web Apps and Native Apps</h2>\n<p>One additional bonus feature of Capacitor is that it works on the web for Progressive Web Apps. That means an app using Capacitor can access many of the same APIs on native mobile but on the web instead. For example, the <a href=\"https://capacitorjs.com/docs/apis/camera\">Camera</a> and <a href=\"https://capacitorjs.com/docs/apis/share\">Share</a> APIs work across iOS, Android, and the web with the same code.</p>\n<p>With this capability, teams often can build and ship on three platforms on day one, or even embrace <a href=\"https://ionicframework.com/blog/forget-mobile-first-progressive-web-app-first-is-the-future/\">Progressive Web App First Development</a>, by using Capacitor.</p>\n<h2 id=\"transform-your-react-web-app-into-native-with-capacitor\">Transform your React Web App into Native with Capacitor</h2>\n<p>Adding native functionality and deploying to iOS, Android, and PWA with your existing React web app is easy. Just install Capacitor, drop it into to your project, and add a platform:</p>\n<pre><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @capacitor/cli @capacitor/core\nnpx cap init\nnpx cap <span class=\"token function\">add</span> ios</code></pre>\n<p>Then, to start using in a web app, import from <code>@capacitor/core</code>:</p>\n<pre><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Share <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Plugins<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> Share<span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'My awesome thing'</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token operator\">:</span> <span class=\"token string\">'Check out this really awesome thing'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'https://capacitorjs.com/'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then run your web app:</p>\n<pre><code class=\"language-shell\"><span class=\"token function\">npm</span> start</code></pre>\n<p>Capacitor apps can be built primarily in the browser, but to deploy and test on iOS or Android (simulator or device), open the IDE of choice and run directly in the IDE:</p>\n<pre><code class=\"language-shell\">npx cap <span class=\"token function\">open</span> ios</code></pre>\n<p>For the full getting started instructions, check out the <a href=\"https://capacitorjs.com/docs/getting-started\">Capacitor documentation</a>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>React Native is no longer the only option for React devs to build iOS and Android apps. Capacitor provides a web-focused solution for teams building React web apps to enable them to ship to the app stores and the web with the same code base.</p>\n<p>And, for teams that are building a new app and interested in exploring a mobile-focused UI library for their Capacitor apps, <a href=\"https://ionicframework.com/\">Ionic React</a> is a great and popular option.</p>\n<p>Beyond React, Capacitor can be used with any modern web app technology, so is a good fit for teams with a diversity of frontend technologies in use, which is another challenge with React Native.</p>\n<p>We&#39;re excited about Capacitor in the React ecosystem, and many teams are as well. Today, Capacitor is powering React apps with hundreds of millions of users, and for major brands and <a href=\"https://ionicframework.com/customers\">enterprise customers</a> like Burger King and Popeye&#39;s. Capacitor adoption has been <a href=\"https://twitter.com/maxlynch/status/1280531102650769408\">growing quickly</a> and given that given that web development with React represents the largest area of React development (<a href=\"https://npmcharts.com/compare/react-native,react-dom?interval=7\">&gt; 17x React Native</a>), we&#39;re thrilled about the potential to help more web devs build cross-platform apps.</p>\n<p>Check out Capacitor today and stay tuned for some exciting updates with the project coming soon: <a href=\"https://capacitorjs.com/\">capacitorjs.com</a></p>\n","meta":{"title":"Native React Apps Without React Native","slug":"native-react-apps-without-react-native","date":"2020-07-14T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch","description":"Build app store apps using React web libraries and Capacitor","featuredImage":"/assets/img/blog/native-wout-react-native.png","featuredImageAlt":"Native React Apps Without React Native"},"featuredImage":"/assets/img/blog/native-wout-react-native.png","featuredImageAlt":"Native React Apps Without React Native"},{"title":"Capacitor announcements at Ioniconf 2020","description":"All the Capacitor announcements from Ioniconf 2020","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"ioniconf-announcements","date":"2020-06-24T08:00:00.000Z","contents":"---\ntitle: Capacitor announcements at Ioniconf 2020\nslug: ioniconf-announcements\ndescription: All the Capacitor announcements from Ioniconf 2020\ndate: 2020-06-24 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\n---\n\nToday at the first ever official Ioniconf, we unveiled a number of exciting updates to Capacitor and the Capacitor community.\n\nIn no particular order, we announced:\n\n* [Capacitor opening up to all modern web technologies]($POST#capacitor-opening-up)\n* [The Capacitor Community project]($POST#capacitor-community)\n* [Capacitor Elements]($POST#capacitor-elements)\n* [Deploy to App Store for Capacitor]($POST#deploy-to-app-store-for-capacitor)\n* [Updated site and domain]($POST#updated-site-domain-and-docs)\n\n<!--more-->\n\nThe conference kicks off a new era for Capacitor and for [Ionic](https://ionic.io/), the company behind Capacitor.\n\nIf you'd like to see the announcements live, the [keynote](https://ioniconf.com/) (along with the rest of the conference) is now [up](https://ioniconf.com/).\n\n## Capacitor opening up\n\nOne of the biggest announcements of the day was that Capacitor will be opening up to embrace every modern web app technology and ecosystem.\n\nWhile technically Capacitor has worked with any modern web framework and UI library, it was not always clear that Capacitor could be used without Ionic Framework, and the project certainly did not embrace outside frameworks.\n\nWith this change, expect to see a lot more Capacitor apps running Angular Material, Tailwind, Material UI, and even Bootstrap. Expect to see content, tutorials, examples, and more  on non-Ionic Framework options from the Capacitor team.\n\nThe new Capacitor mission is to help _all_ web developers build cross-platform apps with their web development skills.\n\n## Capacitor Community\n\nOne of the biggest challenges with an ecosystem like Capacitor (and like any other popular open source ecosystem) is making sure the community can fill in all the gaps left by the core team with plugins, add-ons, and more.\n\nYesterday, web announced a new [Capacitor Community](https://github.com/capacitor-community) GitHub org and NPM scope to curate the best community-supported Capacitor plugins and encourage more developers to build plugins.\n\nTo start, we have a number of great plugins and many are in development. Check out the [Http](https://github.com/capacitor-community/http), [Contacts](https://github.com/capacitor-community/contacts), and [Apple Sign In](https://github.com/capacitor-community/apple-sign-in) plugins. We've also started moving the [Electron](https://github.com/capacitor-community/electron) platform to the community org.\n\nEvery project in the Capacitor Community is _community maintained and supported_, so the Capacitor core team will not be able to provide any kind of community support to any project in here. However, the team is facilitating and in communication with all maintainers.\n\n## Capacitor Elements\n\nWe announced Capacitor Elements, an upcoming project to bring operating-system level UI experiences to every Capacitor app, regardless of the web framework or UI library an app uses.\n\nThese components will be powered by Ionic Framework under the hood, but will be fully compatible and not conflict with any modern UI library.\n\nThe goal is to provide the same types of utility APIs that the operating system would to a traditional native developer, such as Action Sheets, Bottom Drawers, Alerts, Modals, Cameras, and more.\n\nThis makes a Capacitor app feel native right away regardless of whether the app framework provides these controls.\n\nStay tuned for more updates soon!\n\n## Deploy to App Store for Capacitor\n\nWe announced that [Deploy to App Store](https://ionicframework.com/docs/appflow/destinations/intro), a powerful new feature available in Ionic's DevOps service [Appflow](https://useappflow.com/) that enables developers to push builds to the Apple App Store and Google Play Store, is now available to all paid Appflow plans.\n\nThis feature is a significant boost to teams frustrated with the manual and tedious app store publishing process, or for teams that wish to automate app store submission as part of their CI/CD pipeline.\n\nAppflow now fully supports Capacitor, and Capacitor is quickly becoming the preferred native runtime when using Appflow.\n\n## Updated Site, Domain, and Docs\n\nWe've updated the Capacitor site and moved to a new domain ([capacitorjs.com](https://capacitorjs.com)) and Twitter handle ([@capacitorjs](https://twitter.com/capacitorjs)).\n\nWe also rolled out [updated documentation](/docs) as we embark on a documentation overhaul.\n\n## Stay tuned\n\nCapacitor is quickly becoming the focal point of Ionic's open source offering, and we're investing heavily in it. The team itself has grown in the last few weeks and we are truly just getting started on our mission to enable all web developers to build cross-platform apps for the app store and the web.\n\nStay tuned for a ton more Capacitor updates in the coming months!","preview":"<p>Today at the first ever official Ioniconf, we unveiled a number of exciting updates to Capacitor and the Capacitor community.</p>\n<p>In no particular order, we announced:</p>\n<ul>\n<li><a href=\"/blog/ioniconf-announcements#capacitor-opening-up\">Capacitor opening up to all modern web technologies</a></li>\n<li><a href=\"/blog/ioniconf-announcements#capacitor-community\">The Capacitor Community project</a></li>\n<li><a href=\"/blog/ioniconf-announcements#capacitor-elements\">Capacitor Elements</a></li>\n<li><a href=\"/blog/ioniconf-announcements#deploy-to-app-store-for-capacitor\">Deploy to App Store for Capacitor</a></li>\n<li><a href=\"/blog/ioniconf-announcements#updated-site-domain-and-docs\">Updated site and domain</a></li>\n</ul>\n","html":"<p>Today at the first ever official Ioniconf, we unveiled a number of exciting updates to Capacitor and the Capacitor community.</p>\n<p>In no particular order, we announced:</p>\n<ul>\n<li><a href=\"$POST#capacitor-opening-up\">Capacitor opening up to all modern web technologies</a></li>\n<li><a href=\"$POST#capacitor-community\">The Capacitor Community project</a></li>\n<li><a href=\"$POST#capacitor-elements\">Capacitor Elements</a></li>\n<li><a href=\"$POST#deploy-to-app-store-for-capacitor\">Deploy to App Store for Capacitor</a></li>\n<li><a href=\"$POST#updated-site-domain-and-docs\">Updated site and domain</a></li>\n</ul>\n<!--more-->\n\n<p>The conference kicks off a new era for Capacitor and for <a href=\"https://ionic.io/\">Ionic</a>, the company behind Capacitor.</p>\n<p>If you&#39;d like to see the announcements live, the <a href=\"https://ioniconf.com/\">keynote</a> (along with the rest of the conference) is now <a href=\"https://ioniconf.com/\">up</a>.</p>\n<h2 id=\"capacitor-opening-up\">Capacitor opening up</h2>\n<p>One of the biggest announcements of the day was that Capacitor will be opening up to embrace every modern web app technology and ecosystem.</p>\n<p>While technically Capacitor has worked with any modern web framework and UI library, it was not always clear that Capacitor could be used without Ionic Framework, and the project certainly did not embrace outside frameworks.</p>\n<p>With this change, expect to see a lot more Capacitor apps running Angular Material, Tailwind, Material UI, and even Bootstrap. Expect to see content, tutorials, examples, and more  on non-Ionic Framework options from the Capacitor team.</p>\n<p>The new Capacitor mission is to help <em>all</em> web developers build cross-platform apps with their web development skills.</p>\n<h2 id=\"capacitor-community\">Capacitor Community</h2>\n<p>One of the biggest challenges with an ecosystem like Capacitor (and like any other popular open source ecosystem) is making sure the community can fill in all the gaps left by the core team with plugins, add-ons, and more.</p>\n<p>Yesterday, web announced a new <a href=\"https://github.com/capacitor-community\">Capacitor Community</a> GitHub org and NPM scope to curate the best community-supported Capacitor plugins and encourage more developers to build plugins.</p>\n<p>To start, we have a number of great plugins and many are in development. Check out the <a href=\"https://github.com/capacitor-community/http\">Http</a>, <a href=\"https://github.com/capacitor-community/contacts\">Contacts</a>, and <a href=\"https://github.com/capacitor-community/apple-sign-in\">Apple Sign In</a> plugins. We&#39;ve also started moving the <a href=\"https://github.com/capacitor-community/electron\">Electron</a> platform to the community org.</p>\n<p>Every project in the Capacitor Community is <em>community maintained and supported</em>, so the Capacitor core team will not be able to provide any kind of community support to any project in here. However, the team is facilitating and in communication with all maintainers.</p>\n<h2 id=\"capacitor-elements\">Capacitor Elements</h2>\n<p>We announced Capacitor Elements, an upcoming project to bring operating-system level UI experiences to every Capacitor app, regardless of the web framework or UI library an app uses.</p>\n<p>These components will be powered by Ionic Framework under the hood, but will be fully compatible and not conflict with any modern UI library.</p>\n<p>The goal is to provide the same types of utility APIs that the operating system would to a traditional native developer, such as Action Sheets, Bottom Drawers, Alerts, Modals, Cameras, and more.</p>\n<p>This makes a Capacitor app feel native right away regardless of whether the app framework provides these controls.</p>\n<p>Stay tuned for more updates soon!</p>\n<h2 id=\"deploy-to-app-store-for-capacitor\">Deploy to App Store for Capacitor</h2>\n<p>We announced that <a href=\"https://ionicframework.com/docs/appflow/destinations/intro\">Deploy to App Store</a>, a powerful new feature available in Ionic&#39;s DevOps service <a href=\"https://useappflow.com/\">Appflow</a> that enables developers to push builds to the Apple App Store and Google Play Store, is now available to all paid Appflow plans.</p>\n<p>This feature is a significant boost to teams frustrated with the manual and tedious app store publishing process, or for teams that wish to automate app store submission as part of their CI/CD pipeline.</p>\n<p>Appflow now fully supports Capacitor, and Capacitor is quickly becoming the preferred native runtime when using Appflow.</p>\n<h2 id=\"updated-site-domain-and-docs\">Updated Site, Domain, and Docs</h2>\n<p>We&#39;ve updated the Capacitor site and moved to a new domain (<a href=\"https://capacitorjs.com\">capacitorjs.com</a>) and Twitter handle (<a href=\"https://twitter.com/capacitorjs\">@capacitorjs</a>).</p>\n<p>We also rolled out <a href=\"/docs\">updated documentation</a> as we embark on a documentation overhaul.</p>\n<h2 id=\"stay-tuned\">Stay tuned</h2>\n<p>Capacitor is quickly becoming the focal point of Ionic&#39;s open source offering, and we&#39;re investing heavily in it. The team itself has grown in the last few weeks and we are truly just getting started on our mission to enable all web developers to build cross-platform apps for the app store and the web.</p>\n<p>Stay tuned for a ton more Capacitor updates in the coming months!</p>\n","meta":{"title":"Capacitor announcements at Ioniconf 2020","slug":"ioniconf-announcements","description":"All the Capacitor announcements from Ioniconf 2020","date":"2020-06-24T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch"}},{"title":"Announcing Capacitor 2.0","description":"See what Capacitor 2.0 has to offer for web devs building mobile apps","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"announcing-capacitor-2-0","date":"2020-04-08T08:00:00.000Z","contents":"---\ntitle: Announcing Capacitor 2.0\nslug: announcing-capacitor-2-0\ndescription: See what Capacitor 2.0 has to offer for web devs building mobile apps\ndate: 2020-04-08 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\n---\n\nToday we are excited to announce Capacitor 2.0!\n\nCapacitor 2.0 offers some key platform updates as well as security and bug fixes. These include:\n\n * Swift 5 and Xcode 11+ support\n * Android 10 (SDK 29) and AndroidX support\n * Bug fixes and usability improvements to 23+ core plugins\n * Support for generating splash screens and icons\n\nWe documented the whole update and talked about what's next for Capacitor over on the Ionic blog.\n\nCheck it out:\n\n[https://ionicframework.com/blog/announcing-capacitor-2-0/](https://ionicframework.com/blog/announcing-capacitor-2-0/)","preview":"","html":"<p>Today we are excited to announce Capacitor 2.0!</p>\n<p>Capacitor 2.0 offers some key platform updates as well as security and bug fixes. These include:</p>\n<ul>\n<li>Swift 5 and Xcode 11+ support</li>\n<li>Android 10 (SDK 29) and AndroidX support</li>\n<li>Bug fixes and usability improvements to 23+ core plugins</li>\n<li>Support for generating splash screens and icons</li>\n</ul>\n<p>We documented the whole update and talked about what&#39;s next for Capacitor over on the Ionic blog.</p>\n<p>Check it out:</p>\n<p><a href=\"https://ionicframework.com/blog/announcing-capacitor-2-0/\">https://ionicframework.com/blog/announcing-capacitor-2-0/</a></p>\n","meta":{"title":"Announcing Capacitor 2.0","slug":"announcing-capacitor-2-0","description":"See what Capacitor 2.0 has to offer for web devs building mobile apps","date":"2020-04-08T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch"}},{"title":"Announcing Capacitor 1.0","description":"Build awesome mobile apps using web technology with Capacitor","authorName":"Max Lynch","authorEmail":"max@ionic.io","authorUrl":"https://twitter.com/maxlynch","slug":"announcing-capacitor-1-0","date":"2019-05-22T08:00:00.000Z","contents":"---\ntitle: Announcing Capacitor 1.0\nslug: announcing-capacitor-1-0\ndescription: Build awesome mobile apps using web technology with Capacitor\ndate: 2019-05-22 08:00:00\nauthor: Max Lynch <max@ionic.io>\nauthorUrl: https://twitter.com/maxlynch\n---\n\nToday I’m thrilled to announce the 1.0 release of [Capacitor](/), Ionic’s new Native API Container that makes it easy to build web apps that run on iOS, Android, and the web as Progressive Web Apps—with full access to native functionality on each platform.\n\nWe documented this momentous occasion over on the Ionic blog, complete with a comparison to Cordova and where Capacitor is headed from here.\n\nTake a look: [https://ionicframework.com/blog/announcing-capacitor-1-0/](https://ionicframework.com/blog/announcing-capacitor-1-0/).","preview":"","html":"<p>Today I’m thrilled to announce the 1.0 release of <a href=\"/\">Capacitor</a>, Ionic’s new Native API Container that makes it easy to build web apps that run on iOS, Android, and the web as Progressive Web Apps—with full access to native functionality on each platform.</p>\n<p>We documented this momentous occasion over on the Ionic blog, complete with a comparison to Cordova and where Capacitor is headed from here.</p>\n<p>Take a look: <a href=\"https://ionicframework.com/blog/announcing-capacitor-1-0/\">https://ionicframework.com/blog/announcing-capacitor-1-0/</a>.</p>\n","meta":{"title":"Announcing Capacitor 1.0","slug":"announcing-capacitor-1-0","description":"Build awesome mobile apps using web technology with Capacitor","date":"2019-05-22T08:00:00.000Z","author":"Max Lynch <max@ionic.io>","authorUrl":"https://twitter.com/maxlynch"}}]