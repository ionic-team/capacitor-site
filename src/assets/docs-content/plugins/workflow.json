{"title":"Plugin Development Workflow","description":"Capacitor Plugin Development Workflow","url":"/docs/plugins/workflow","contributors":["dotNetkow"],"headings":[{"id":"plugin-development-workflow","level":1,"text":"Plugin Development Workflow"},{"id":"implementing-a-new-function","level":2,"text":"Implementing a New Function"},{"id":"local-testing","level":2,"text":"Local Testing"},{"id":"unlinking-the-plugin","level":3,"text":"Unlinking the Plugin"},{"id":"publishing","level":2,"text":"Publishing"}],"srcPath":"./docs-md/plugins/workflow.md","content":"\n<h1 id=\"plugin-development-workflow\">\n  \n  Plugin Development Workflow\n  \n</h1>\n<p>With the new plugin created, you can begin implementing functionality across a variety of platforms.</p>\n\n<h2 id=\"implementing-a-new-function\">\n  <a class=\"heading-link\" href=\"#implementing-a-new-function\"><ion-icon name=\"ios-link\"></ion-icon>\n  Implementing a New Function\n  </a>\n</h2>\n<p>Each plugin comes with some TypeScript files that provide typing to TypeScript consumers of your plugin.</p>\n<p>Starting with the TypeScript interface is a good way to build out the API for your plugin. For example,\nhere&#39;s the default interface for our Plugin located in <code>src/definitions.ts</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"@capacitor/core\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PluginRegistry</span> <span class=\"token punctuation\">{</span>\n    Echo<span class=\"token punctuation\">:</span> EchoPlugin<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EchoPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>To implement new functionality in your plugin, begin by defining a new function in the exported interface:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EchoPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">openMap</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> latitude<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> longitude<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Implement the web implementation in <code>src/web.ts</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token function\">openMap</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> latitude<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> longitude<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// logic here</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>To compile the plugin, navigate into the plugin directory then run: </p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build</code></pre>\n  </highlight-code-line>\n  <p>Implement <a  href=/docs/plugins/android>Android functionality</a>> in <code>android/src/main/[nested folders]/PluginName.java</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PluginMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">openMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PluginCall</span> call<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Double</span> latitude <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"latitude\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Double</span> longitude <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"longitude\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// more logic</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Implement <a  href=/docs/plugins/ios>iOS functionality</a>> in <code>ios/Plugin/Plugin.swift</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token atrule\">@objc</span> <span class=\"token keyword\">func</span> <span class=\"token function\">openMap</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> call<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CAPPluginCall</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> latitude <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"latitude\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> longitude <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"longitude\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// more logic</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <blockquote>\n<p>Remember to export the plugin to Capacitor (to make it aware of the plugin) on <a href=\"/docs/plugins/ios#export-to-capacitor\">iOS</a> and <a href=\"/docs/plugins/android#export-to-capacitor\">Android</a>.</p>\n</blockquote>\n\n<h2 id=\"local-testing\">\n  <a class=\"heading-link\" href=\"#local-testing\"><ion-icon name=\"ios-link\"></ion-icon>\n  Local Testing\n  </a>\n</h2>\n<p>To test the plugin locally while developing it, link the plugin folder to your app project using the <a href=\"https://docs.npmjs.com/cli/link\">npm link command</a>.</p>\n<p>First, within the plugin folder, run: <code>npm link</code>.</p>\n<p>Then, within the project that will test the plugin, run: </p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">link</span> plugin-name\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> plugin-name</code></pre>\n  </highlight-code-line>\n  <p>The project&#39;s <code>package.json</code> file now shows the plugin package link in the dependencies list:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"my-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file:my-plugin\"</span><span class=\"token punctuation\">,</span></code></pre>\n  </highlight-code-line>\n  <p>Finally, run <code>npx cap sync</code> to make the native projects aware of your plugin. If it was detected correctly, it will print something similar to: </p>\n<blockquote>\n<p>Found 1 Capacitor plugin for android: my-plugin (0.0.1)</p>\n</blockquote>\n\n<h3 id=\"unlinking-the-plugin\">\n  <a class=\"heading-link\" href=\"#unlinking-the-plugin\"><ion-icon name=\"ios-link\"></ion-icon>\n  Unlinking the Plugin\n  </a>\n</h3>\n<p>Once you&#39;re done with local testing, be sure to unlink the plugin. Otherwise, subsequent <code>npm install</code>s  will install the local plugin, not the published version on npm (assuming you publish it).</p>\n<p>First, run <code>npm unlink --no-save plugin-name</code> in the app project folder.</p>\n<p>Next, run <code>npm unlink</code> in the plugin folder.</p>\n\n<h2 id=\"publishing\">\n  <a class=\"heading-link\" href=\"#publishing\"><ion-icon name=\"ios-link\"></ion-icon>\n  Publishing\n  </a>\n</h2>\n<p>Whenever you are ready to publish your plugin, just use:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> publish</code></pre>\n  </highlight-code-line>\n  <p>This will build the JS portion of your plugin and publish the rest of your plugin files to npm.</p>\n<p>Your package can now be installed using <code>npm install your-plugin</code> in any Capacitor app.</p>\n"}