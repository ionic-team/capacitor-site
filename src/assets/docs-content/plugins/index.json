{"title":"Capacitor Plugins","description":"Capacitor Plugins","url":"/docs/plugins","contributors":["mlynch","jcesarmobile","dotNetkow"],"lastUpdated":"2020-06-25T18:55:44Z","headings":[{"id":"capacitor-plugins","level":1,"text":"Capacitor Plugins"},{"id":"how-capacitor-plugins-work","level":2,"text":"How Capacitor Plugins Work"},{"id":"getting-started","level":2,"text":"Getting Started"},{"id":"next-steps","level":2,"text":"Next steps"}],"srcPath":"./docs-md/plugins/index.md","content":"\n<h1 id=\"capacitor-plugins\">\n  \n  Capacitor Plugins\n  \n</h1>\n<p class=\"intro\">Plugins in Capacitor enable JavaScript to interface directly with Native APIs.</p>\n\n\n<h2 id=\"how-capacitor-plugins-work\">\n  <a class=\"heading-link\" href=\"#how-capacitor-plugins-work\"><ion-icon name=\"link\"></ion-icon>\n  How Capacitor Plugins Work\n  </a>\n</h2>\n<p>With Plugins, a web app can access the full power of the Native APIs, doing everything a traditional native app can. Plugins are especially great for wrapping common native operations that might use very different APIs across platforms, while exposing a consistent, cross-platform API to JavaScript.</p>\n<p>Additionally, the Plugin capability in Capacitor makes it possible for teams with a mix of traditional native developers and web developers to work together on different parts of the app.</p>\n<p>Capacitor auto generates JavaScript hooks on the client, so most plugins only need to build\na native Swift/Obj-C plugin for iOS, and/or a Java one for Android. Of course, adding custom JavaScript\nfor a plugin is possible, and is just like providing a JavaScript npm package.</p>\n\n<h2 id=\"getting-started\">\n  <a class=\"heading-link\" href=\"#getting-started\"><ion-icon name=\"link\"></ion-icon>\n  Getting Started\n  </a>\n</h2>\n<p>Capacitor comes with a Plugin generator to start new plugins quickly. To use it, run</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code>npx @capacitor/cli plugin:generate</code></pre>\n  </highlight-code-line>\n  <p>This starts a wizard prompting you for information about your new plugin. For example:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code>npx @capacitor/cli plugin:generate\n✏️  Creating new Capacitor plugin\n? Plugin NPM name <span class=\"token punctuation\">(</span>kebab-case<span class=\"token punctuation\">)</span>: my-plugin\n? Plugin <span class=\"token function\">id</span> <span class=\"token punctuation\">(</span>domain-style syntax. ex: com.example.plugin<span class=\"token punctuation\">)</span> com.ionicframework.myplugin\n? Plugin class name <span class=\"token punctuation\">(</span>ex: AwesomePlugin<span class=\"token punctuation\">)</span> MyPlugin\n? description:\n? <span class=\"token function\">git</span> repository:\n? author:\n? license: MIT\n? package.json will be created, <span class=\"token keyword\">do</span> you want to continue? <span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span></code></pre>\n  </highlight-code-line>\n  <ul>\n<li><code>Plugin NPM name</code>: a kebab-case name of a package that will be available on npm (not a strict requirement if your package will be on a private npm repo).</li>\n<li><code>Plugin ID</code>: a domain-style identifier. It is primarily used for the package name in Java.</li>\n<li><code>Plugin Class Name</code>: the initial name of the class used in Java and Swift. See the additional note about class names in the <a  href=/docs/plugins/ios>iOS Plugin</a>> section of this guide.</li>\n<li><code>description</code>: a brief introduction about the plugin.</li>\n<li><code>git repository</code>: the URL to a git repository where the source code of the plugin will be hosted.</li>\n<li><code>author</code> (optional): the name of the plugin creator in <code>package.json</code>.</li>\n<li><code>license</code> (optional): the license under which the plugin is bound. MIT license is the default.</li>\n<li><code>package.json will be created</code>: enter &quot;Y&quot; and/or hit Enter/Return to finish plugin setup.</li>\n</ul>\n\n<h2 id=\"next-steps\">\n  <a class=\"heading-link\" href=\"#next-steps\"><ion-icon name=\"link\"></ion-icon>\n  Next steps\n  </a>\n</h2>\n<p>Now it&#39;s up to you to make your plugin do something truly awesome! <a href=\"./plugins/workflow\">Read on</a> to learn how to implement new functionality, test the plugin locally, and publish it on npm.</p>\n<p>Afterward, check out the details covering how to build for each platform. Follow the <a href=\"./plugins/ios\">iOS</a> guide for information on using Swift (or Obj-C) to build an iOS plugin, the <a href=\"./plugins/android\">Android</a> guide for building Android plugins with Java, the <a href=\"./plugins/web\">Web</a> guide for implementing web and PWA functionality for your plugin, and the <a href=\"./plugins/js\">Custom JavaScript</a> guide for information on how to build a custom JavaScript plugin (i.e. in addition to Capacitor&#39;s auto-JS plugin binding).</p>\n"}